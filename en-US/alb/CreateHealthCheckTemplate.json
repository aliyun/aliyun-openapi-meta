{
  "name": "CreateHealthCheckTemplate",
  "deprecated": false,
  "protocol": "HTTP|HTTPS",
  "method": "GET|POST",
  "pathPattern": "",
  "parameters": [
    {
      "name": "ClientToken",
      "description": "The client token that is used to ensure the idempotence of the request.\n\nYou can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.\n\n>  If you do not specify this parameter, the system automatically uses the value of RequestId as the value of ClientToken. The request ID may be different for each request.",
      "position": "Query",
      "type": "String",
      "required": false
    },
    {
      "name": "DryRun",
      "description": "Specifies whether to perform only a dry run, without performing the actual request. Valid values:\n\n*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error code is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.\n*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a **2xx** HTTP status code is returned and the operation is performed.",
      "position": "Query",
      "type": "Boolean",
      "required": false
    },
    {
      "name": "HealthCheckCodes",
      "description": "The HTTP status codes that are used to indicate whether the backend server passes the health check.",
      "position": "Query",
      "type": "Array",
      "required": false
    },
    {
      "name": "HealthCheckConnectPort",
      "description": "The port that is used for health checks.\n\nValid values: **0 to 65535**.\n\nDefault value: **0**. If you set the value to 0, the port of a backend server is used for health checks.",
      "position": "Query",
      "type": "Integer",
      "required": false
    },
    {
      "name": "HealthCheckHost",
      "description": "The domain name that you want to use for the health check.\n\nDefault value: **$SERVER_IP**. The domain name must be 1 to 80 characters in length. The domain name must meet the following requirements:\n\n*   The domain name can contain lowercase letters, digits, hyphens (-), and periods (.).\n*   The domain name must contain at least one period (.) but cannot start or end with a period (.).\n*   The rightmost domain label can contain only letters but cannot contain digits or hyphens (-).\n*   Other fields cannot start or end with a hyphen (-).\n\nThis parameter is required only if the **HealthCheckProtocol** parameter is set to **HTTP**.",
      "position": "Query",
      "type": "String",
      "required": false
    },
    {
      "name": "HealthCheckHttpVersion",
      "description": "The HTTP version that is used for health checks.\n\nValid values: **HTTP 1.0** and **HTTP 1.1**.\n\nDefault value: **HTTP 1.1**.\n\n> This parameter is valid only if the `HealthCheckProtocol` parameter is set to **HTTP**.",
      "position": "Query",
      "type": "String",
      "required": false
    },
    {
      "name": "HealthCheckInterval",
      "description": "The interval at which health checks are performed.\n\nValid values: **1 to 50**.\n\nDefault value: **2**.",
      "position": "Query",
      "type": "Integer",
      "required": false
    },
    {
      "name": "HealthCheckMethod",
      "description": "The method that you want to use for the health check. Valid values:\n\n*   **HEAD**: By default, the ALB instance sends HEAD requests to a backend server to perform HTTP health checks.\n*   **POST**: gRPC health checks automatically use the POST method.\n*   **GET**: If the length of a response exceeds 8 KB, the response is truncated. However, the health check result is not affected.\n\n> This parameter takes effect only when the **HealthCheckProtocol** parameter is set to **HTTP** or **gRPC**.",
      "position": "Query",
      "type": "String",
      "required": false
    },
    {
      "name": "HealthCheckPath",
      "description": "The URL that is used for health checks.\n\nIt must be 1 to 80 characters in length, and can contain letters, digits, hyphens (-), forward slashes (/), periods (.), percent signs (%), question marks (?), number signs (#), and ampersands (&). It can also contain the following extended characters: `_ ; ~ ! ( ) * [ ] @ $ ^ : ' , +`. The URL must start with a forward slash (/).\n\n> This parameter is valid only if the `HealthCheckProtocol` parameter is set to **HTTP**.",
      "position": "Query",
      "type": "String",
      "required": false
    },
    {
      "name": "HealthCheckProtocol",
      "description": "The protocol that you want to use for health checks. Valid values:\n\n*   **HTTP** (default): To perform HTTP health checks, ALB sends HEAD or GET requests to a backend server to check whether the backend server is healthy.\n*   **TCP**: To perform TCP health checks, ALB sends SYN packets to a backend server to check whether the port of the backend server is available to receive requests.\n*   **gRPC**: To perform gRPC health checks, ALB sends POST or GET requests to a backend server to check whether the backend server is healthy.",
      "position": "Query",
      "type": "String",
      "required": false
    },
    {
      "name": "HealthCheckTemplateName",
      "description": "The name of the health check template.\n\nThe name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (\\_), and hyphens (-). The name must start with a letter.",
      "position": "Query",
      "type": "String",
      "required": true
    },
    {
      "name": "HealthCheckTimeout",
      "description": "The timeout period of a health check. If a backend server does not respond within the specified timeout period, the backend server fails the health check.\n\nValid values: **1 to 300**.\n\nDefault value: **5**.\n\n> If the value of the `HealthCheckTimeout` parameter is smaller than that of the `HealthCheckInterval` parameter, the timeout period specified by the `HealthCheckTimeout` parameter is ignored and the value of the `HealthCheckInterval` parameter is used as the timeout period.",
      "position": "Query",
      "type": "Integer",
      "required": false
    },
    {
      "name": "HealthyThreshold",
      "description": "The number of times that an unhealthy backend server must consecutively pass health checks before it is declared healthy. In this case, the health status is changed from **fail** to **success**.\n\nValid values: **2 to 10**.\n\nDefault value: **3**.",
      "position": "Query",
      "type": "Integer",
      "required": false
    },
    {
      "name": "Tag",
      "description": "The tags.",
      "position": "Query",
      "type": "Array",
      "required": false
    },
    {
      "name": "UnhealthyThreshold",
      "description": "The number of times that a healthy backend server must consecutively fail health checks before it is declared unhealthy. In this case, the health status is changed from **success** to **fail**.\n\nValid values: **2 to 10**.\n\nDefault value: **3**.",
      "position": "Query",
      "type": "Integer",
      "required": false
    }
  ]
}