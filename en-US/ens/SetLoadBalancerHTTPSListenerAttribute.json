{
  "name": "SetLoadBalancerHTTPSListenerAttribute",
  "deprecated": false,
  "protocol": "HTTP|HTTPS",
  "method": "GET|POST",
  "pathPattern": "",
  "parameters": [
    {
      "name": "Description",
      "description": "The description of the listener. The description must be **1** to **80** characters in length.\n\n>  The value cannot start with `http://` or `https://`.",
      "position": "Query",
      "type": "String",
      "required": false
    },
    {
      "name": "HealthCheck",
      "description": "Specifies whether to enable the health check feature. Valid values:\n\n*   **on**\n*   **off**",
      "position": "Query",
      "type": "String",
      "required": false
    },
    {
      "name": "HealthCheckConnectPort",
      "description": "The port that is used for health checks. Valid values: **1** to **65535**. If you leave this parameter empty, the port specified by BackendServerPort is used for health checks.\n\n>  This parameter takes effect only if you set HealthCheck to on.",
      "position": "Query",
      "type": "Integer",
      "required": false
    },
    {
      "name": "HealthCheckDomain",
      "description": "The domain name that you want to use for health checks.\n\n>  This parameter takes effect only if you set HealthCheck to on.",
      "position": "Query",
      "type": "String",
      "required": false
    },
    {
      "name": "HealthCheckHttpCode",
      "description": "The HTTP status code for a successful health check. Valid values:\n\n*   **http\\_2xx** (default)\n*   **http\\_3xx**.\n*   **http\\_4xx**\n*   **http\\_5xx**\n\n>  This parameter takes effect only if you set HealthCheck to on.",
      "position": "Query",
      "type": "String",
      "required": false
    },
    {
      "name": "HealthCheckInterval",
      "description": "The interval at which health checks are performed. Valid values: **1** to **50**. Unit: seconds.\n\n>  This parameter takes effect only if you set HealthCheck to on.",
      "position": "Query",
      "type": "Integer",
      "required": false
    },
    {
      "name": "HealthCheckMethod",
      "description": "The health check method used in HTTP health checks. Valid values:\n\n*   **head** (default): requests the head of the page.\n*   **get**: requests the specified part of the page and returns the entity body.\n\n>  This parameter takes effect only if you set HealthCheck to on.",
      "position": "Query",
      "type": "String",
      "required": false
    },
    {
      "name": "HealthCheckTimeout",
      "description": "The timeout period of a health check response. If a backend server does not respond within the specified timeout period, the server fails to pass the health check.\n\n*   Default value: 5.\n*   Valid values: **1** to **300**.\n*   Unit: seconds.\n\n> \n\n*   This parameter takes effect only if you set HealthCheck to on.\n\n*   If the value of the HealthCheckTimeout parameter is smaller than the value of the HealthCheckInterval parameter, the timeout period specified by the HealthCheckTimeout parameter becomes invalid and the value of the HealthCheckInterval parameter is used as the timeout period.",
      "position": "Query",
      "type": "Integer",
      "required": false
    },
    {
      "name": "HealthCheckURI",
      "description": "The Uniform Resource Identifier (URI) that you want to use for health checks. The URI must be **1** to **80** characters in length.\n\n> \n\n*   The URL must start with a forward slash (`/`) and contain characters other than forward slashes (`/`).\n\n*   This parameter takes effect only if you set HealthCheck to on.",
      "position": "Query",
      "type": "String",
      "required": false
    },
    {
      "name": "HealthyThreshold",
      "description": "The number of consecutive successful health checks that must occur before an unhealthy and inaccessible backend server is declared healthy and accessible. Valid values: **2** to **10**.\n\n>  This parameter takes effect only if you set HealthCheck to on.",
      "position": "Query",
      "type": "Integer",
      "required": false
    },
    {
      "name": "IdleTimeout",
      "description": "The timeout period for idle connections. Default value: 15. Valid values: **1** to **60**. Unit: seconds.\n\n>  If no request is received within the specified timeout period, ELB closes the connection. When another request is received, ELB establishes a new connection.",
      "position": "Query",
      "type": "Integer",
      "required": false
    },
    {
      "name": "ListenerPort",
      "description": "The frontend port that is used by the ELB instance. Valid values: **1** to **65535**.",
      "position": "Query",
      "type": "Integer",
      "required": true
    },
    {
      "name": "LoadBalancerId",
      "description": "The ID of the Edge Load Balancer (ELB) instance.",
      "position": "Query",
      "type": "String",
      "required": true
    },
    {
      "name": "RequestTimeout",
      "description": "The timeout period of requests. Default value: 60. Valid values: **1** to **180**. Unit: seconds.\n\n>  If no response is received from the backend server within the specified timeout period, ELB returns an HTTP 504 error code to the client.",
      "position": "Query",
      "type": "Integer",
      "required": false
    },
    {
      "name": "Scheduler",
      "description": "The routing algorithm. Valid values:\n\n*   **wrr**: Backend servers with higher weights receive more requests than those with lower weights.\n*   **wlc**: Requests are distributed based on the weight and load of each backend server. The load refers to the number of connections to a backend server. If two backend servers have the same weight, the backend server that has fewer connections receives more requests.\n*   **rr**: Requests are distributed to backend servers in sequence.\n*   **sch**: consistent hashing that is based on source IP addresses. Requests from the same source IP address are distributed to the same backend server.\n*   **qch**: consistent hashing that is based on QUIC connection IDs. Requests that contain the same QUIC connection ID are distributed to the same backend server.\n*   **iqch**: consistent hashing that is based on specific three bytes of the iQUIC CIDs. Requests whose second to fourth bytes are the same are distributed to the same backend server.",
      "position": "Query",
      "type": "String",
      "required": false
    },
    {
      "name": "ServerCertificateId",
      "description": "The ID of the server certificate.",
      "position": "Query",
      "type": "String",
      "required": false
    },
    {
      "name": "UnhealthyThreshold",
      "description": "The number of consecutive failed health checks that must occur before a healthy and accessible backend server is declared unhealthy and inaccessible. Valid values: **2** to **10**.\n\n>  This parameter takes effect only if you set HealthCheck to on.",
      "position": "Query",
      "type": "Integer",
      "required": false
    }
  ]
}